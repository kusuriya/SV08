[gcode_macro BEEP]
description: Emits a short beep using the printer's beeper for audible feedback
gcode:
    {% set count = params.COUNT|default(1)|int %}
    {% for i in range(count) %}
        SET_PIN PIN=beeper VALUE=1
        G4 P20
        SET_PIN PIN=beeper VALUE=0
        G4 P20
    {% endfor %}

[gcode_macro mainled_on]
description: Turns the main LED on
gcode:
    SET_PIN PIN=main_led VALUE=1

[gcode_macro mainled_off]
description: Turns the main LED off
gcode:
    SET_PIN PIN=main_led VALUE=0

#--------------------------------------------------------------------#
#--------------------------------------------------------------------#

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}


[force_move]
enable_force_move: True # WARNING: Force moves can crash the toolhead if not used carefully).

[gcode_macro _global_var]
description: Defines global variables for many settings used across macros
variable_filament_ok: True
variable_pause_park: {'x': 0, 'y': 350, 'z': 10, 'e': 1}
variable_cancel_park: {'x': 0, 'y': 350, 'z': 10, 'e': 1}
variable_z_maximum_lifting_distance: 345
variable_pause_resume_travel_speed: 150
variable_bed_mesh_calibrate_target_temp: 55
variable_load_filament_extruder_temp: 260
variable_clean_nozzle_pos: {'x': 347, 'y': 315, 'z': 6}
variable_preheat_temp: 150
variable_clean_bed_temp: 55
variable_post_print_fan_speed: 0.75
variable_post_print_cool_time: 25000
gcode:

[gcode_macro _IDLE_TIMEOUT]
description: Handles idle timeout by turning off heaters and motors if not paused, or displays a message if paused.
gcode:
    {% if printer.print_stats.state == "paused" %}
      RESPOND TYPE=echo MSG="No operations in 10min!"
    {% else %}
     M84
     TURN_OFF_HEATERS
    {% endif %}

[gcode_macro _ALL_FAN_OFF]
description: Turns off all cooling fans.
gcode:
    M106 S0
    M107

[gcode_macro CHECK_FILAMENT_SENSOR]
description: Checks filament sensor status and returns detection state.
gcode:
    {% set cancel = True %}
    {% if params.CANCEL is defined and params.CANCEL|lower in ['0', 'false', 'no'] %}
        {% set cancel = False %}
    {% endif %}
    {action_respond_info("Checking filament sensor.")}
    M117 SENSOR CHECK
    {% if 'filament_switch_sensor filament_sensor' in printer %}
        ; Attempt 1
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
        G4 P1000 ; Reset sensor
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
        G4 P2000 ; Wait 2s for sensor to settle
        QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
        G4 P200
        QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
        G4 P200
        QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
        {% set sensor_detected_1 = printer['filament_switch_sensor filament_sensor'].filament_detected %}
        {action_respond_info("Sensor check attempt 1: Detected: %s" % sensor_detected_1)}
        M117 SENSOR ATTEMPT 1 D{sensor_detected_1}
        
        ; Attempt 2
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
        G4 P1000
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
        G4 P2000
        QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
        G4 P200
        QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
        G4 P200
        QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
        {% set sensor_detected_2 = printer['filament_switch_sensor filament_sensor'].filament_detected %}
        {action_respond_info("Sensor check attempt 2: Detected: %s" % sensor_detected_2)}
        M117 SENSOR ATTEMPT 2 D{sensor_detected_2}
        
        ; Final state
        {% set sensor_detected = sensor_detected_2 %}
        {% if sensor_detected_1 != sensor_detected_2 %}
            {action_respond_info("Inconsistent sensor readings, assuming no filament for safety.")}
            {% set sensor_detected = False %}
        {% endif %}
        
        {action_respond_info("Final sensor check. Detected: %s" % sensor_detected)}
        M117 SENSOR FINAL D{sensor_detected}
        {% if not sensor_detected %}
            {action_respond_info("No filament detected! Please insert filament.")}
            M117 NO FILAMENT DETECTED
            LCD_RED
            BEEP
            {% if cancel %}
                {action_respond_info("Cancelling print due to no filament.")}
                M117 CANCELING PRINT
                CANCEL_PRINT
            {% else %}
                {action_respond_info("Insert filament to continue.")}
                M117 INSERT FILAMENT
            {% endif %}
        {% else %}
            {action_respond_info("Filament detected, proceeding.")}
            M117 FILAMENT OK
        {% endif %}
    {% else %}
        {action_respond_info("No filament sensor configured, assuming filament present.")}
        M117 NO SENSOR
        {% set sensor_detected = True %}
    {% endif %}

[gcode_macro CLEAN_NOZZLE]
description: Cleans the nozzle and avoids remaining poop on build plate. Cleaning poop will be kicked away with the nozzle after cooling.
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    # {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    # {% set current_target_temp  = printer.extruder.target|int %}
    # {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    LCD_WHITE #MOD LCD cleaning color
    M117 CLEAN NOZZLE
    {action_respond_info("Cleaning nozzle")}
    # {% if current_target_temp != 0 %} #MOD bed heating when START PRINT
    #     M140 S{mesh_calibrate_temp}
    # {% else %} # MOD bed heating when CLEANING ONLY
    # M140 S{printer['gcode_macro _global_var'].clean_bed_temp}
    # {% endif %}
    # M104 S{extruder_temp}
    {% if printer.toolhead.homed_axes != "xyz" %}
       G28
    {% endif %}
    G90
    # CHECK_FILAMENT_SENSOR
    M117 PREPARE CLEAN
    G1 Z0.9 F300
    G1 Y360 X318 F4500 #MOD add full silicone brush
    G1 Y356 X320 #MOD add full silicone brush
    G1 Y360 X322
    G1 Y356 X324
    G1 Y360 X326
    G1 Y356 X328
    G1 Y360 X330
    G1 Y356 X332
    G1 Y360 X334
    G1 Y356 X336
    G1 Y360 X338
    G1 Y356 X340
    G1 Y360 X342 #MOD add full silicone brush
    G1 Y356 X344 #MOD add full silicone brush
    G1 Y360 X346 #MOD add full silicone brush
    G1 Y356 X348 #MOD add full silicone brush
    G1 Y360 X350 #MOD add full silicone brush
    G1 Y356 X352 #MOD add full silicone brush
    G1 Z7 F300 #MOD wipe nozzle height
    M400 #MOD wait move finished
    M117 CLEANING
    G1 Z0.7 F600 #MOD Brush height
    G1 Y359 X310 F9000 #MOD Brush WIGGLE LEFT 2
    G1 Y358 X350 #MOD Brush WIGGLE RIGHT 2
    G1 Y356 X310 F9000 #MOD Brush WIGGLE LEFT 2
    M400 #MOD wait move finished
    # G1 Z6 F300
    # G1 Y360 X353 F4500 #MOD
    # M400 #MOD
    # G1 X354 Y0 Z3.6 F9000 #MOD Move to print start position
    # M400
    M117 CLEAN FINISHED
    # G1 X0 Y0 F9000 #MOD Move to print start position
    # G1 Z0.0 #MOD Move to plate for nozzle seal
    # G1 Z0.4 #MOD raise a bit to avoid scratches when printing preconfigured gcode which doesn't raise nozzle preprint
    # G90 E0 #MOD reset extruder distance
    # M400 #MOD wait until moves finished
    # M107 #MOD stop fan after clean and nozzle sealing on bed
    # {% if current_target_temp == 0 %} # MOD heating off
    #     M104 S0 
    #     M140 S0
    # {% endif %}

# MOD Z-OFFSET START
[gcode_macro _CALIBRATION_ZOFFSET]
description: Calibrates the Z-offset by heating the bed and extruder, leveling the gantry, and running Z-offset calibration.
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    {% set bed_temp = params.BED_TEMP|default(printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|default(60))|int %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(printer['gcode_macro _global_var'].load_filament_extruder_temp|default(200))|int %}
    {% set preheat_temp = printer['gcode_macro _global_var'].preheat_temp|default(140)|int %}
    {% set soak_time = params.SOAK_TIME|default(45000)|int %}
    {% if soak_time < 1000 %}
        {% set soak_time = 1000 %}
    {% endif %}
    LCD_YELLOW
    M117 CALIBRATE Z-OFFSET
    G28
    M104 S{preheat_temp}
    QUAD_GANTRY_LEVEL
    M117 SOAK FOR ZOFFSET
    M104 S{preheat_temp}
    M190 S{bed_temp}
    LCD_YELLOW
    G4 P{soak_time}
    M104 S{extruder_temp}
    CLEAN_NOZZLE
    G1 Z5.0 #raise nozzle to avoid bed scratching when traveling to z-probe
    LCD_YELLOW
    M117 CALIBRATING Z
    M104 S{preheat_temp}
    G4 P300
    Z_OFFSET_CALIBRATION
    BEEP
    GET_Z_OFFSET  ; Use helper macro for Z-offset display

[gcode_macro GET_Z_OFFSET]
description: Displays the current Z-offset value on the LCD and console, or indicates if unavailable.
gcode:
    {% if 'configfile' in printer and 'settings' in printer.configfile and 'probe' in printer.configfile.settings and 'z_offset' in printer.configfile.settings.probe %}
        {% set z_height = printer.configfile.settings.probe.z_offset|float|round(3) %}
        {action_respond_info("Z-Offset: %s" % z_height)}
        M117 Z-OFFSET: {z_height}
    {% else %}
        {action_respond_info("Z-Offset: Not found. Ensure probe is configured and calibration completed.")}
        M117 Z-OFFSET UNAVAILABLE
        LCD_YELLOW
    {% endif %}

[delayed_gcode _auto_zoffset]
gcode:
    SAVE_VARIABLE VARIABLE=offsetadjust VALUE={'%05.2f' % (0)}
    _CALIBRATION_ZOFFSET
    GET_Z_OFFSET PREFIX="Z-Offset Before Test Print: "
    LCD_YELLOW
    M117 TEST PRINT Z
    G1 Z3.0
    CHECK_FILAMENT_SENSOR
    M23 /.zoffset_test.gcode
    M24
    GET_Z_OFFSET PREFIX="Z-Offset After Test Print: "
    {action_respond_info("Z-Offset: Wait for z-offset storing in printer.cfg and automatic reboot.")}
    BEEP

[gcode_macro _Delay_Calibrate]
description: Triggers the _auto_zoffset macro to start Z-offset calibration with a 1-second delay.
gcode:
    UPDATE_DELAYED_GCODE ID=_auto_zoffset DURATION=1.0

#MOD Z-OFFSET END

#MOD DISPLAY AND CONSOLE START
[gcode_macro DISPLAY_Z_OFFSET]
description: Z-offset on the LCD if too high (= nozzle too low) and logs to console, changes LED color red (warning)
gcode:
    {% if 'configfile' in printer and 'settings' in printer.configfile and 'probe' in printer.configfile.settings and 'z_offset' in printer.configfile.settings.probe %}
        {% set z_height = printer.configfile.settings.probe.z_offset|float|round(3) %}
        {% if z_height >= 2.000 %}
            {action_respond_info("Warning: Z-Offset value may scratch the nozzle on the bed! Nozzle possibly too low. Calibrate Z-Offset!\nZ-Offset: %s" % z_height)}
            M117 Z-OFFSET: {z_height}
            LCD_RED
        {% else %}
            {action_respond_info("Z-Offset: %s" % z_height)}
            LCD_GREEN
        {% endif %}
    {% else %}
        {action_respond_info("Z-Offset: not found")}
        M117 Z-OFFSET NOT FOUND
        LCD_GREEN
    {% endif %}

[delayed_gcode SHOW_Z_OFFSET_ON_STARTUP]
initial_duration: 30.0
gcode:
    DISPLAY_Z_OFFSET

# Macro to display the IP address on LCD only
[gcode_macro DISPLAY_IP_ADDRESS]
description: Displays the IP address of the printer on LCD
gcode:
    {action_respond_info("Running _GET_IP for IP display")}
    _GET_IP

[delayed_gcode SHOW_IP_ADDRESS_ON_STARTUP]
initial_duration: 25.0
gcode:
    DISPLAY_IP_ADDRESS

# Macro to display the total print time in the console
[gcode_macro DISPLAY_TOTAL_PRINT_TIME]
description: Displays the total print time in hours in the console
gcode:
    {% if 'print_stats' in printer and 'total_duration' in printer.print_stats %}
        {% set total_seconds = printer.print_stats.total_duration|float %}
        {% set total_hours = (total_seconds / 3600)|round(1) %}
        {action_respond_info("Total print time: %s hours" % total_hours)}
    {% else %}
        {action_respond_info("Total print time: not available")}
    {% endif %}

[delayed_gcode SHOW_TOTAL_PRINT_TIME_ON_STARTUP]
initial_duration: 32.0
gcode:
    DISPLAY_TOTAL_PRINT_TIME
# MOD DISPLAY AND CONSOLE END

[delayed_gcode TEST_BELT]
initial_duration: 0.3
gcode:
    {% set x_freq = printer.save_variables.variables.x_freq|float %}
    {% set y_freq = printer.save_variables.variables.y_freq|float %}
    {% set show_freq = printer.save_variables.variables.show_freq %}
    {% if show_freq == 1 %}
        M117 x {x_freq}, y {y_freq}
        SAVE_VARIABLE VARIABLE=show_freq VALUE=0
    {% endif %}

[gcode_macro QUAD_GANTRY_LEVEL]
description: Performs quad gantry leveling with preheating and Z-axis re-homing.
rename_existing:QUAD_GANTRY_LEVEL_BASE
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    LCD_YELLOW # MOD LCD calibrate color
    M104 S{printer['gcode_macro _global_var'].preheat_temp} # MOD nozzle priming to melt away hard filament blobs
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp  = printer.heater_bed.target|int %}

    {action_respond_info("CHECK HEATING!")}
    {% if printer.heater_bed.temperature <= mesh_calibrate_temp %}
        M140 S{mesh_calibrate_temp} #MOD No waiting for QGL, no better result
        {action_respond_info("BED HEATING")}
    {% endif %}

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G4 P2000 # MOD Add pause for steppers
        G28
    {% endif %}
    
    CLEAN_NOZZLE
    M117 QUAD GANTRYLEVEL
    QUAD_GANTRY_LEVEL_BASE
    G4 P2000 # MOD Add pause for steppers
    G28 Z # MOD Homes Z again after QGL

    {% if current_target_temp == 0 %}
        M104 S0 # MOD nozzle priming off
        M140 S0
    {% endif %}

[gcode_macro PROBE_CALIBRATE]
description: Calibrates the probe's Z-offset with bed preheating and homing.
rename_existing:PROBE_CALIBRATE_BASE
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    M104 S{printer['gcode_macro _global_var'].preheat_temp} # MOD nozzle priming to melt away hard filament blobs
    {% set current_target_temp  = printer.heater_bed.target|int %}
    {% set z_offset_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}

    {action_respond_info("z_offset_calibrate")}
    {% if printer.heater_bed.temperature <= z_offset_calibrate_temp %}
        M140 S{z_offset_calibrate_temp}
        {action_respond_info("BED TARGET TEMPNOT REACHED!")}
        {action_respond_info("BED HEATING")}
        M190 S{z_offset_calibrate_temp}
    {% endif %}

    LCD_YELLOW
    M117 PROBE CALIBRATE
    G4 P2000 # MOD Add pause for steppers
    G28
    PROBE_CALIBRATE_BASE
    TESTZ z=-4


[gcode_macro BED_MESH_CALIBRATE]
description: Creates a bed mesh profile with adaptive probing and preheating.
rename_existing: BED_MESH_CALIBRATE_BASE
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    LCD_YELLOW # MOD LCD calibrate color
    M117 BED MESH AREA
    M104 S{printer['gcode_macro _global_var'].preheat_temp} # MOD Preheat nozzle for softening residues
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set current_target_temp  = printer.heater_bed.target|int %}

    {action_respond_info("CHECK HEATING!")}
    {% if printer.heater_bed.temperature <= mesh_calibrate_temp %}
        M140 S{mesh_calibrate_temp}
        {action_respond_info("BED TARGET TEMP NOT REACHED!")}
        {action_respond_info("BED HEATING")}
        M190 S{mesh_calibrate_temp}
    {% endif %}

    {% if printer.toolhead.homed_axes|lower != "xyz" %}
        G4 P2000 # MOD Add pause for steppers
        G28
    {% endif %}
    
    BED_MESH_CLEAR
    
    BED_MESH_CALIBRATE_BASE ADAPTIVE=1

    {% if current_target_temp == 0 %}
        M140 S0  
    {% endif %}

[gcode_macro G34]
description: Manually triggers quad gantry leveling and moves to a safe position.
gcode:
    LCD_YELLOW # MOD LCD calibrate color
    M117 MANUAL QGL
    BED_MESH_CLEAR
    G4 P2000 # MOD Add pause for steppers
    {% if printer.toolhead.homed_axes|lower != "xyz" %}
      G28
    {% else %}
      G28 Z
    {% endif %}
    QUAD_GANTRY_LEVEL 
    G4 P2000 # MOD Add pause for steppers
    G28 Z
    G0 X175 Y175 Z30 F3600
    M117 G34 FINISHED

[delayed_gcode bed_mesh_init]
initial_duration: .01
gcode:
    BED_MESH_PROFILE LOAD=default

[delayed_gcode _print_start_wait]
gcode:
    {% if printer['gcode_macro START_PRINT'].state == 'Heating'%}
        {action_respond_info("PREPARE->HEATING!")}
    {% elif printer['gcode_macro START_PRINT'].state == 'Start' %}
        {action_respond_info("HEATING->START!")}
    {% endif %}

    {% if printer['gcode_macro START_PRINT'].execute|lower != 'false' %}
        START_PRINT
    {% endif %}


[gcode_macro START_PRINT]
description: Initializes a print job by homing, heating, leveling, and cleaning the nozzle. Must be set in Slicer machine start g-code.
variable_state: 'Prepare'
variable_record_extruder_temp:0
variable_max_record_extruder_temp:0
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    {% set mesh_name = "default" %}
    {% set mesh_calibrate_temp = printer['gcode_macro _global_var'].bed_mesh_calibrate_target_temp|int %}
    {% set extruder_target_temp = printer.extruder.target|int %}
    {% set bed_target_temp = printer.heater_bed.target|int %}
    {% set FILE_NAME = printer.print_stats.filename %}
    LCD_ORANGE #MOD LCD heating 
    BEEP #MOD Start signal
    M400
    CLEAR_PAUSE
    G90
    {% if state == 'Prepare' %}

        {action_respond_info("PREPARE!")}
        M117 PREPARE {FILE_NAME}
        {% if printer.extruder.temperature < printer['gcode_macro _global_var'].preheat_temp %}
          M104 S{printer['gcode_macro _global_var'].preheat_temp}
        {% endif %}
        {% if printer.heater_bed.temperature <= mesh_calibrate_temp %}
          M140 S{mesh_calibrate_temp}
        {% endif %}
        {% if printer.toolhead.homed_axes|lower != "xyz" %}
            G4 P2000 #MOD Add pause for steppers
            G28
        {% endif %}
        CHECK_FILAMENT_SENSOR
        
        G90 #MOD
        
        {action_respond_info("CHECK HEATING!")}
        M

        M140 S{bed_target_temp}
        M104 S{extruder_target_temp}

        {% if printer.heater_bed.temperature <= bed_target_temp %}
            M117 PREHEAT {FILE_NAME}
            {action_respond_info("BED HEATING")}
            M190 S{bed_target_temp}
        {% endif %}

        {% if printer.extruder.temperature <= extruder_target_temp %}
            M117 PREHEAT {FILE_NAME}
            {action_respond_info("NOZZLE HEATING")}
            M109 S{extruder_target_temp} 
        {% endif %}

        {% if printer.quad_gantry_level.applied|lower != 'true' %}
            QUAD_GANTRY_LEVEL
        {% endif %}

        CLEAN_NOZZLE #MOD add nozzle cleaning
        BED_MESH_CALIBRATE ADAPTIVE=1
        G1 Z0.0 #MOD lower nozzle to avoid oozing
        M109 S{extruder_target_temp} #MOD nozzle preheat
        M140 S{bed_target_temp} # MOD bed preheat
        G1 Z0.6 #MOD Move up a bit again for bed safety
        
        SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Start"' 
        UPDATE_DELAYED_GCODE ID=_print_start_wait DURATION=0.5

    {% elif state == 'Start' %}
        LCD_YELLOW
        M117 Now printing: {FILE_NAME} #MOD was M117 Printing now!!!, see PREPARE_PRINT
        {action_respond_info("START!")}
    {% endif %}

[gcode_macro END_PRINT]
description: Finalizes a print job by retracting filament, parking the toolhead, and turning off heaters and fans.
variable_state: 'normal'
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    {% set z_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance|int %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    M400
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0

    M117 PRINT FINISHED!
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enable == True and
          printer['filament_switch_sensor filament_sensor'].filament_detected == True
    %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp
        %}
            G1 E-2 F2700
            G1 E-2 Z0.2 F2400
        {% endif %}
    {% endif %}

    {% if (printer.gcode_move.position.z + 10) < 325 %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X0 Y360 F9000

    TURN_OFF_HEATERS
    # SET_FAN_SPEED FAN=fan0 SPEED={printer['gcode_macro _global_var'].post_print_fan_speed} # MOD Extra nozzle cooling after print
    # SET_FAN_SPEED FAN=fan1 SPEED={printer['gcode_macro _global_var'].post_print_fan_speed} # MOD Extra nozzle cooling after print
    # G4 P{printer['gcode_macro _global_var'].post_print_cool_time} # MOD Extra nozzle cooling after print
    _ALL_FAN_OFF
    M84 X Y Z E  

    M220 S100
    M221 S100

    LCD_GREEN # MOD LCD Print finished - return to default
    BEEP # MOD acoustic end signal
    CLEAR_PAUSE

    {action_respond_info("PRINT FINISHED!")}


[gcode_macro CANCEL_PRINT]
description: Cancels a print job, retracts filament, parks the toolhead, and signals cancellation.
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var missing!")}
        M117 ERROR: GLOBAL VAR MISSING
        LCD_RED
        CANCEL_PRINT_BASE
    {% endif %}
    {% set x_park = printer['gcode_macro _global_var'].cancel_park.x|float %}
    {% set y_park = printer['gcode_macro _global_var'].cancel_park.y|float %}
    {% set z_park = printer['gcode_macro _global_var'].cancel_park.z|float %}
    {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
    {% set e_restract = printer['gcode_macro _global_var'].cancel_park.e|float %}
    {% set e_mintemp  = printer.configfile.settings['extruder'].min_extrude_temp %}

    CANCEL_PRINT_BASE
    {action_respond_info("Print cancel!")}
    
    G91
    {% if printer['filament_switch_sensor filament_sensor'].enable == True and 
          printer['filament_switch_sensor filament_sensor'].filament_detected == True %}
        {% if (printer.extruder.target != 0 and printer.extruder.temperature >= printer.extruder.target) or
              printer.extruder.temperature >= e_mintemp %}
            G1 E-{e_restract} F500
        {% else %}
            {action_respond_info("NOZZLE NOT HOT")}
        {% endif %}
    {% endif %}

    {% if (printer.gcode_move.position.z + 10) < z_lift_max %}
        G1 Z+10 F3000
    {% else %}
        G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
    {% endif %}
    G90
    G1 X{x_park} Y{y_park} F9000

    TURN_OFF_HEATERS
    SET_FAN_SPEED FAN=fan0 SPEED={printer['gcode_macro _global_var'].post_print_fan_speed} # MOD Extra nozzle cooling after print
    SET_FAN_SPEED FAN=fan1 SPEED={printer['gcode_macro _global_var'].post_print_fan_speed} # MOD Extra nozzle cooling after print
    G4 P{printer['gcode_macro _global_var'].post_print_cool_time} # MOD Extra nozzle cooling after print
    _ALL_FAN_OFF
    LCD_RED # MOD LCD cancel color
    BEEP # MOD acoustic cancel signal
    CLEAR_PAUSE
    M84 X Y Z E

    M117 CANCELED
    {action_respond_info("CANCEL PRINT SUCCESS!")}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=state VALUE='"Prepare"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=record_extruder_temp VALUE=0  
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=max_record_extruder_temp VALUE=0


[gcode_macro PAUSE]
description: Pauses the print, parks the toolhead, and optionally handles filament changes.
rename_existing: PAUSE_BASE
variable_state: 'normal'
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 PAUSE: Global variables missing!
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    {% if printer.pause_resume.is_paused == False %}
        {% set x_park = printer['gcode_macro _global_var'].pause_park.x|float %}
        {% set y_park = printer['gcode_macro _global_var'].pause_park.y|float %}
        {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
        {% set z_lift_max = printer['gcode_macro _global_var'].z_maximum_lifting_distance %}
        {% set state = params.STATE|default('normal') %}
        
        {action_respond_info("Print paused!")}
        LCD_CYAN
        PAUSE_BASE
        M117 PAUSE PRINT!
        G91
        {% if (printer.gcode_move.position.z + 5) < z_lift_max %}
            G1 Z+5 F3000
        {% else %}
            G1 Z+{(z_lift_max - printer.gcode_move.position.z)} F3000
        {% endif %}
        G90
        {% if printer.gcode_move.position.x != x_park or
              printer.gcode_move.position.y != y_park %}
            G1 X{x_park} Y{y_park} F{printer['gcode_macro _global_var'].pause_resume_travel_speed * 60}
        {% endif %}

        M104 S{printer.extruder.target}
    
        {% if state == 'normal' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                {% if printer['filament_switch_sensor filament_sensor'].enable == True and 
                      printer['filament_switch_sensor filament_sensor'].filament_detected == True %}
                    G91
                    G1 E-{e_restract} F300
                    G90
                {% elif printer['filament_switch_sensor filament_sensor'].enable == True and 
                        printer['filament_switch_sensor filament_sensor'].filament_detected != True %}
                    G91
                    G1 E+95 F300
                    G1 E-10 F1500
                    G1 E-20 F600
                    M400
                    G4 P3000
                    G1 E-50 F300 
                    G90
                {% endif %}
            {% endif %}
        {% elif state == 'filament_change' %}
            {% if (printer.extruder.temperature + 5 >= printer.extruder.target) and (printer.extruder.temperature >= printer.configfile.settings['extruder'].min_extrude_temp) %}
                G91
                G1 E-5 F300
                G90
            {% endif %}
        {% endif %}
    {% endif %}
    BEEP # MOD acoustic pause signal

[delayed_gcode _resume_wait]
gcode:
    {% if printer['gcode_macro RESUME'].execute|lower != 'false' %}
        RESUME
    {% endif %}


[gcode_macro RESUME]
description: Resumes a paused print, ensuring filament is present.
rename_existing: RESUME_BASE
variable_state: 'normal'
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR RESUME
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    {% set e_restract = printer['gcode_macro _global_var'].pause_park.e|float %}
    {% set extruder_target_temp = printer.extruder.target|int %}
    {% set FILE_NAME = printer.print_stats.filename %}
    {% set state = params.STATE|default('normal') %}
    ; Direct sensor check
    {% if 'filament_switch_sensor filament_sensor' in printer %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
        G4 P2000
        QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
        {% set direct_detected = printer['filament_switch_sensor filament_sensor'].filament_detected %}
        {action_respond_info("Direct sensor check: Detected: %s" % direct_detected)}
    {% else %}
        {% set direct_detected = True %}
    {% endif %}
    CHECK_FILAMENT_SENSOR CANCEL=False
    {% if not direct_detected %}
        {action_respond_info("Cannot resume: No filament detected. Please insert filament.")}
        M117 INSERT FILAMENT
        LCD_RED
        BEEP
    {% else %}
        {% if state == 'filament_change' %}
            {% if printer.extruder.temperature + 5 < printer.extruder.target %}
                M104 S{extruder_target_temp}
                {action_respond_info("NOZZLE NOT HOT! Heating to %d°C." % extruder_target_temp)}
                M117 NOZZLE HEATING
                M109 S{extruder_target_temp}
            {% endif %}
            G91
            G1 E5 F300
            G90
        {% elif state == 'normal' %}
            G91
            G1 E{e_restract} F300
            G90
        {% endif %}
        {action_respond_info("Print resuming!")}
        M117 RESUME {FILE_NAME}
        LCD_GREEN
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
        G4 P2000
        RESUME_BASE
    {% endif %}

[gcode_macro LOAD_FILAMENT]
description: Loads filament into the extruder by heating and extruding, with filament sensor check.
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 LOAD ERROR: GLOBAL_VAR MISSING
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    LCD_PURPLE # MOD LCD Load/Unload color
    {action_respond_info("Starting filament load.")}
    M117 LOAD START
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp = printer.extruder.target|int %}
    {% if printer.print_stats.state != "printing" %}
        ; Direct sensor check
        {% if 'filament_switch_sensor filament_sensor' in printer %}
            SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
            G4 P2000
            QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
            {% set direct_detected = printer['filament_switch_sensor filament_sensor'].filament_detected %}
            {action_respond_info("Direct sensor check: Detected: %s" % direct_detected)}
        {% else %}
            {% set direct_detected = True %}
        {% endif %}
        
        CHECK_FILAMENT_SENSOR CANCEL=False
        {% if not direct_detected %}
            {action_respond_info("Aborting filament load due to no filament (direct check).")}
            M117 LOAD ABORTED
            LCD_RED
            BEEP
            M117 INSERT FILAMENT TO RETRY
            G4 P5000 ; Wait 5s for user to insert filament
            ; Retry check
            {% if 'filament_switch_sensor filament_sensor' in printer %}
                SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
                G4 P2000
                QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
                {% set retry_detected = printer['filament_switch_sensor filament_sensor'].filament_detected %}
                {action_respond_info("Retry sensor check: Detected: %s" % retry_detected)}
                {% if not retry_detected %}
                    {action_respond_info("No filament inserted, aborting.")}
                    M117 LOAD ABORTED
                    LCD_RED
                    BEEP
                {% else %}
                    {action_respond_info("Filament inserted, proceeding.")}
                {% endif %}
            {% else %}
                {% set retry_detected = True %}
            {% endif %}
        {% else %}
            {% set retry_detected = True %}
        {% endif %}
        
        {% if retry_detected %}
            {action_respond_info("Initial filament check passed, proceeding to heat.")}
            M117 HEAT START
            {% if printer.print_stats.state != "paused" %}
                M104 S{extruder_temp}
                M117 NOZZLE HEATING
                {action_respond_info("NOZZLE NOT HOT! Heating to %d°C." % extruder_temp)}
                M109 S{extruder_temp}
            {% else %}
                {% if printer.extruder.target == 0 %}
                    M104 S{extruder_temp}
                    M117 NOZZLE HEATING
                    {action_respond_info("NOZZLE NOT HOT! Heating to %d°C." % extruder_temp)}
                    M109 S{extruder_temp}
                {% else %}
                    M104 S{printer.extruder.target}
                    M117 NOZZLE HEATING
                    {action_respond_info("NOZZLE NOT HOT! Heating to %d°C." % printer.extruder.target)}
                    M109 S{printer.extruder.target}
                {% endif %}
            {% endif %}
            ; Pre-extrusion check
            {% if 'filament_switch_sensor filament_sensor' in printer %}
                SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
                G4 P2000
                QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
                {% set pre_extrude_detected = printer['filament_switch_sensor filament_sensor'].filament_detected %}
                {action_respond_info("Pre-extrusion sensor check: Detected: %s" % pre_extrude_detected)}
            {% else %}
                {% set pre_extrude_detected = True %}
            {% endif %}
            CHECK_FILAMENT_SENSOR CANCEL=False
            {% if not pre_extrude_detected %}
                {action_respond_info("Aborting filament load due to no filament (pre-extrusion check).")}
                M117 LOAD ABORTED
                LCD_RED
                BEEP
            {% else %}
                {action_respond_info("Pre-extrusion filament check passed, starting extrusion.")}
                M117 EXTRUDING
                G91
                G1 E45 F300
                G1 E35 F150
                G90
                M400
                CHECK_FILAMENT_SENSOR CANCEL=False
                ; Post-extrusion check
                {% if 'filament_switch_sensor filament_sensor' in printer %}
                    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
                    G4 P2000
                    QUERY_FILAMENT_SENSOR SENSOR=filament_sensor
                    {% set post_extrude_detected = printer['filament_switch_sensor filament_sensor'].filament_detected %}
                    {action_respond_info("Post-extrusion sensor check: Detected: %s" % post_extrude_detected)}
                {% else %}
                    {% set post_extrude_detected = True %}
                {% endif %}
                {% if not post_extrude_detected %}
                    {action_respond_info("Filament lost during extrusion, aborting.")}
                    M117 LOAD FAILED
                    LCD_RED
                    BEEP
                {% else %}
                    {action_respond_info("Extrusion complete.")}
                    M117 EXTRUDE FINISH
                {% endif %}
            {% endif %}
            M400
            {% if current_target_temp == 0 or printer.print_stats.state != "paused" %}
                M104 S0
                {action_respond_info("Cooling extruder.")}
            {% endif %}
        {% endif %}
    {% else %}
        {action_respond_info("Cannot load filament: Printer is currently printing!")}
        M117 NO LOAD: PRINTING
        LCD_RED
    {% endif %}
    {action_respond_info("Filament load process")}
    M117 LOAD END
    {action_respond_info("Filament load")}
    BEEP # MOD acoustic end signal
    
[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from the extruder by heating and retracting.
gcode:
    {% if 'gcode_macro _global_var' not in printer %}
        {action_respond_info("Error: _global_var macro missing!")}
        M117 ERROR UNLOAD
        LCD_RED
        CANCEL_PRINT
    {% endif %}
    LCD_PURPLE # MOD LCD Load/Unload color
    {% set extruder_temp = printer['gcode_macro _global_var'].load_filament_extruder_temp|int %}
    {% set current_target_temp  = printer.extruder.target|int %}

    {% if printer.print_stats.state != "printing" %}
        {% if printer.print_stats.state != "paused" %}
            M104 S{extruder_temp}
            M117 NOZZLE HEATING
            {action_respond_info("NOZZLE NOT HOT!")}
            {action_respond_info("NOZZLE HEATING")}
            M109 S{extruder_temp}
        {% else %}
            {% if printer.extruder.target == 0 %}
                M104 S{extruder_temp}
                M117 NOZZLE HEATING
                {action_respond_info("NOZZLE NOT HOT!")}
                {action_respond_info("NOZZLE HEATING")}
                M109 S{extruder_temp}
            {% else %}
                M104 S{printer.extruder.target}
                M117 NOZZLE HEATING
                {action_respond_info("NOZZLE NOT HOT!")}
                {action_respond_info("NOZZLE HEATING")}
                M109 S{printer.extruder.target}
            {% endif %}
        {% endif %}
        M117 RETRACTING
        G91
        # G1 E+25 F300
        G1 E-10 F1500
        G1 E-20 F600
        M400
        G4 P3000
        G1 E-50 F300 
        G90
        M400
        M117 RETRACT FINISH
        {action_respond_info("Retract filament")}
        BEEP # MOD acoustic unload finished signal
        M400
        {% if current_target_temp == 0 or printer.print_stats.state != "paused"%}
            M104 S0
        {% endif %}
    {% else %}
        {action_respond_info("DON'T UNLOAD FILAMENT! PRINTING!")}
    {% endif %}
    BEEP # MOD acoustic end signal

[gcode_macro M109]
description: Sets and waits for the extruder to reach the target temperature within a tolerance range.
rename_existing: M99109
gcode:    
    {% set s = params.S|float %}    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-1} MAXIMUM={s+1}   
    {% endif %}
    
[gcode_macro M190]
description: Sets and waits for the bed to reach the target temperature within a tolerance range.
rename_existing: M99190
gcode:    
    {% set s = params.S|float %}
    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-1} MAXIMUM={s+1}  
    {% endif %}
    
[gcode_macro M600]
description: Initiates a filament change by pausing the print and setting the filament_change state.
gcode:
    LCD_CYAN #MOD
    M117 "CHANGE FILAMENT"
    BEEP
    PAUSE STATE=filament_change

#-----------MOD START - LED MACROS TO SET LCD COLORS------------------#

[gcode_macro LCD_DEFAULT]
description: Sets the LCD display to custom colors
gcode:
    SET_LED LED=Screen_Colour RED=0.5 GREEN=0.4 BLUE=0.7 INDEX=1 TRANSMIT=0
    SET_LED LED=Screen_Colour RED=0.5 GREEN=0.4 BLUE=0.7 INDEX=2 TRANSMIT=0
    SET_LED LED=Screen_Colour RED=0.5 GREEN=0.4 BLUE=0.7 INDEX=3

[gcode_macro LCD_RED]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=0 BLUE=0 TRANSMIT=1

[gcode_macro LCD_ORANGE]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=0.1 BLUE=0 TRANSMIT=1

[gcode_macro LCD_GREEN]
gcode:
    SET_LED LED=Screen_Colour RED=0 GREEN=1 BLUE=0 TRANSMIT=1

[gcode_macro LCD_BLUE]
gcode:
    SET_LED LED=Screen_Colour RED=0 GREEN=0 BLUE=1 TRANSMIT=1

[gcode_macro LCD_PURPLE]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=0 BLUE=1 TRANSMIT=1

[gcode_macro LCD_CYAN]
gcode:
    SET_LED LED=Screen_Colour RED=0 GREEN=1 BLUE=1 TRANSMIT=1

[gcode_macro LCD_YELLOW]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=0.9 BLUE=0.05 TRANSMIT=1

[gcode_macro LCD_BLACK]
gcode:
    SET_LED LED=Screen_Colour RED=0 GREEN=0 BLUE=0 TRANSMIT=1

[gcode_macro LCD_WHITE]
gcode:
    SET_LED LED=Screen_Colour RED=1 GREEN=1 BLUE=0.80 TRANSMIT=1
#-----------MOD END - LED MACROS TO SET LCD COLORS------------------#
